// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init
// creates the tables in your database

// To get started with Prisma Client, you need to install the @prisma/client package: npm install @prisma/client

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String    @unique
  password String
  Files    Files[]
  Folders  Folders[]
}

model Folders {
  id           String    @id @default(uuid())
  name         String
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  parentFolder String    @default("/")
  childFolder  Folders[]
  Folders      Folders?  @relation(fields: [foldersId], references: [id])
  foldersId    String?
}

// model SubFolders {
//   id             String   @id @default(uuid())
//   name           String
//   author         User     @relation(fields: [authorId], references: [id])
//   authorId       String
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
//   parentFolder   Folders  @relation(fields: [parentFolderId], references: [id])
//   parentFolderId String
// }

model Files {
  id            String   @id @default(uuid())
  name          String
  updatedName   String?
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  downloadCount Int      @default(0)
  path          String
}
