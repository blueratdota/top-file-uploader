// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init
// creates the tables in your database

// To get started with Prisma Client, you need to install the @prisma/client package: npm install @prisma/client

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String    @unique
  password      String
  Files         Files[]
  ownedFolders  Folders[] @relation("folderOwner")
  sharedFolders Folders[] @relation("folderViewers")
}

model Folders {
  id             String    @id @default(uuid())
  name           String
  author         User      @relation("folderOwner", fields: [authorId], references: [id])
  authorId       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  parentFolderId String?
  parentFolder   Folders?  @relation("children", fields: [parentFolderId], references: [id])
  childFolder    Folders[] @relation("children")
  allowedUsers   User[]    @relation("folderViewers")
  storedFiles    Files[]
}

model Files {
  id            String   @id @default(uuid())
  name          String
  updatedName   String?
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  downloadCount Int      @default(0)
  path          String
  folders       Folders? @relation(fields: [foldersId], references: [id])
  foldersId     String?
  fileSize      Int

  @@unique([name, foldersId])
}
